#!/usr/bin/node
/* vim: set ft=javascript: */

/*
 * Public script /hi-score-tool/
 * Purpose   : Run a helper script for lifecycle step
 * Example   : hi-score-tool 00
 * Arguments : (positional)
 *   0. The life cycle number as presented below.  The default is '00'.
 *     - 00 Help    (see 00-hi-score-help   )
 *     - 01 Install (see 01-hi-score-install)
 *     - 02 Setup
 *     - 03 Design
 *     - 04 Develop - Lint
 *     - 05 Develop - Test
 *     - 06 Develop - Coverage
 *     - 07 Develop - Commit
 *     - 08 Develop - Publish coverage
 *     - 09 Build
 *     - 10 Deploy
 *     - 11 Feedback
 * Throws    : Exit status is non-zero on failure
 * Method    :
 *   1. Parses command-line agument and extracts step number
 *      (Uses '00' if number cannot be determined).
 *   2. Runs associated script.
 *
 * @author   : Michael S. Mikowski - mike.mikowski@gmail.com
 *
*/
/*jslint         node   : true, continue : true,
 devel  : true, indent  : 2,    maxerr   : 50,
 newcap : true, nomen   : true, plusplus : true,
 regexp : true, sloppy  : true, vars     : false,
 white  : true, todo    : true, unparam  : true
*/
/*global Promise */

// == BEGIN SCRIPT hi-score-tool ======================================
  // == BEGIN MODULE SCOPE VARIABLES ==================================
  'use strict';
  var
    // Import capabilities
    EventEmitter = require( 'events'       ).EventEmitter,
    LineReader   = require( 'line-by-line' ),

    applyPatchFn = require( 'apply-patch'  ).applyPatch,
    execFn       = require( 'child_process' ).exec,
    fsObj        = require( 'fs'           ),
    mkdirpFn     = require( 'mkdirp'       ),
    ncpFn        = require( 'ncp'          ).ncp,
    pathObj      = require( 'path'         ),
    rmDirFn      = require( 'rmdir'        ),
    utilObj      = require( 'util'         ),
    whichFn      = require( 'which'        ),
    promiseObj   = Promise,

    // Convert to promises using promisfy
    promisifyFn   = utilObj.promisify,
    makeRmDirProm = promisifyFn( rmDirFn ),
    makeStatProm  = promisifyFn( fsObj.stat ),
    makeWhichProm = promisifyFn( whichFn ),

    eventObj      = new EventEmitter(),

    // Assign nodejs builtins
    fqAppFilename = __filename,
    fqBinDirname  = __dirname,

    // Get environment values
    appName       = pathObj.basename( fqAppFilename, '.js' ),
    argList       = process.argv,
    fqOrigDirname = process.cwd(), // or pathObj.resolve()
    versList      = process.versions.node.split('.'),

    // Set paths
    fqProjDirname   = pathObj.dirname( fqBinDirname ),
    fqGitDirname    = fqProjDirname   + '/.git',
    fqModuleDirname = fqProjDirname   + '/node_modules',
    fqPkgFilename   = fqProjDirname   + '/package.json',
    fqPatchFilename = fqProjDirname   + '/patch/uglify-js-3.0.21.patch',

    fqUglyDirname   = fqModuleDirname + '/uglifyjs',
    fqScopeFileStr  = fqUglyDirname   + '/lib/scope.js',

    // Set minimum Node verion number and init empty map
    minVersionInt  = 8,
    exePathMap     = {},

    fqHookFilename, pkgMatrix, setupMatrix, toolMap
    ;
  // == . END MODULE SCOPE VARIABLES ==================================

  // == BEGIN UTILITY METHODS =========================================
  function exitGoodFn () { process.exit( 0 ); }
  function exitBadFn  () { process.exit( 1 ); }
  
  // BEGIN utility /abortFn/
  function abortFn () {
    var arg_list = Array.from( arguments );
    arg_list.unshift( '>> ABORT' );
    console.warn.apply( arg_list );
    exitBadFn();
  }
  // . END utility /abortFn/

  // BEGIN utility /logFn/
  function logFn() {
    var arg_list = Array.from( arguments );
    arg_list.unshift( '>>' );
    console.log.apply( null, arg_list );
  }
  // . END utility /logFn/

  // BEGIN utlity /grepFileFn/
  function grepFileFn ( filename, match_str ) {
    return new Promise( function ( resolve_fn ) {
      var
        is_matched    = false,
        line_read_obj = new LineReader( filename, {skipEmptyLines:true })
        ;

      line_read_obj.on( 'error', abortFn );
      line_read_obj.on( 'line',  function ( line_str ) {
        if ( line_str.indexOf( match_str ) > -1 ) {
          is_matched = true;
          line_read_obj.close();
        }
      });
      line_read_obj.on( 'end', function () {
        resolve_fn( is_matched );
      });
    });
  }
  // . END utility /grepFileFn/

  // BEGIN utilities to return resolve and reject functions
  function makeRejectFuncFn ( reject_fn ) {
    return function ( error_data ) { reject_fn( error_data ); };
  }

  function makeResolveFuncFn ( resolve_fn ) {
    return function () { resolve_fn(); };
  }
  // . END utilities to return resolve and reject functions

  // BEGIN utility /copyPathFn/
  function copyPathFn( fq_src_path_str, fq_dest_path_str, do_dir_copy ) {
    if ( do_dir_copy ) {
      return new Promise( function ( resolve_fn, reject_fn ) {
        ncpFn( fq_src_path_str, fq_dest_path_str,
          function ( error_data ) {
            if ( error_data ) { return reject_fn(); }
            resolve_fn();
          }
        );
      });
    }

    return new Promise( function ( resolve_fn, reject_fn ) {
      var
        read_obj         = fsObj.createReadStream(  fq_src_path_str  ),
        write_obj        = fsObj.createWriteStream( fq_dest_path_str ),
        full_reject_fn  = makeRejectFuncFn(  reject_fn  ),
        full_resolve_fn = makeResolveFuncFn( resolve_fn )
        ;

      read_obj.on(  'error', full_reject_fn  );
      write_obj.on( 'error', full_reject_fn  );
      write_obj.on( 'close', full_resolve_fn );
      read_obj.pipe( write_obj );
    });
  }
  // . END utility /copyPathFn/

  // BEGIN utility /storePathFn/
  function storePathFn ( path_str ) {
    var
      context_map = this,
      exe_key = context_map.exe_key;

    if ( ! exe_key ) {
      abortFn( 'No key provided for ' + path_str );
    }
    exePathMap[ exe_key ] = path_str;
  }
  // . END utility /storePathFn/

  // BEGIN utility /initModuleVarsFn/
  function initModuleVarsFn () {
    var
      exe_list     = [ 'git', 'patch' ],
      exe_count    = exe_list.length,
      promise_list = [],
      idx, exe_key, bound_fn, promise_obj;

    // Assign executable path vars
    for ( idx = 0; idx < exe_count; idx++ ) {
      exe_key = exe_list[ idx ];
      bound_fn = storePathFn.bind( { exe_key : exe_key });
      promise_obj = makeWhichProm( exe_key );
      promise_obj.then( bound_fn ).catch( abortFn );
      promise_list.push( promise_obj );
    }

    promiseObj.all( promise_list )
      .then( function () { eventObj.emit( '01ReadPkgFile' ); } )
      .catch( abortFn );
  }
  // . END utility /initModuleVarsFn/

  // BEGIN utility /storePkgMapFn/
  function storePkgMapFn ( error_obj, json_str ) {
    if ( error_obj ) { return abortFn( error_obj ); }
    pkgMatrix   = JSON.parse( json_str ) || [];
    setupMatrix = pkgMatrix.xhi_02SetupMatrix;
    if ( ! setupMatrix ) {
      abortFn( 'xhi_02SetupMatrix not set in package.json' );
    }
    eventObj.emit( '02RmVendorDirs' );
  }
  // . END utility /storePkgMapFn/

  // BEGIN utility /readPkgFileFn/
  function readPkgFileFn () {
    fsObj.readFile( fqPkgFilename, 'utf8', storePkgMapFn, abortFn );
  }
  // END utility /readPkgFileFn/

  // BEGIN utility /rmVendorDirsFn/
  function rmVendorDirsFn () {
    var
      asset_group_table  = setupMatrix.asset_group_table,
      asset_group_count  = asset_group_table.length,
      promise_list       = [],

      idx, asset_group_map, fq_dest_dir_str, promise_obj
      ;

    for ( idx = 0; idx < asset_group_count; idx++ ) {
      asset_group_map = asset_group_table[ idx ] || {};
      fq_dest_dir_str = fqProjDirname + '/' + asset_group_map.dest_dir_str;
      mkdirpFn.sync( fq_dest_dir_str );

      promise_obj = makeRmDirProm( fq_dest_dir_str );
      promise_list.push( promise_obj );
    }

    promiseObj.all( promise_list )
      .then( function () { eventObj.emit( '03CopyVendorFiles' ); } )
      .catch( abortFn );
  }
  // . END utility /rmVendorDirsFn/

  // BEGIN utility /copyVendorFilesFn/
  function copyVendorFilesFn () {
    var
      asset_group_table  = setupMatrix.asset_group_table || [],
      dev_dependency_map = pkgMatrix.devDependencies     || {},
      asset_group_count  = asset_group_table.length,
      promise_list       = [],

      idx, asset_group_map, asset_list, asset_count,
      fq_dest_dir_str, dest_ext_str, do_dir_copy,

      idj, asset_map, src_asset_name, src_dir_str,
      src_pkg_name, dest_vers_str, dest_name,
      fq_src_path_list, fq_src_path_str,
      fq_dest_path_str, promise_obj
      ;

    for ( idx = 0; idx < asset_group_count; idx++ ) {
      asset_group_map = asset_group_table[ idx ] || {};

      asset_list  = asset_group_map.asset_list   || [];
      asset_count = asset_list.length;

      dest_ext_str     = asset_group_map.dest_ext_str;
      do_dir_copy      = asset_group_map.do_dir_copy;
      fq_dest_dir_str  = fqProjDirname + '/' + asset_group_map.dest_dir_str;


      mkdirpFn.sync( fq_dest_dir_str );
      ASSET_MAP: for ( idj = 0; idj < asset_count; idj++ ) {
        asset_map = asset_list[ idj ];
        src_asset_name = asset_map.src_asset_name;
        src_dir_str    = asset_map.src_dir_str || '';
        src_pkg_name   = asset_map.src_pkg_name;

        dest_vers_str  = dev_dependency_map[ src_pkg_name ];

        if ( ! dest_vers_str ) {
          logFn( 'WARN: package ' + src_pkg_name + ' not found.');
          continue ASSET_MAP;
        }
        dest_name = asset_map.dest_name || src_pkg_name;

        fq_dest_path_str = fq_dest_dir_str
          + '/' + dest_name + '-' + dest_vers_str;
        fq_src_path_list = [ fqModuleDirname, src_pkg_name, src_asset_name ];
        if ( src_dir_str ) { fq_src_path_list.splice( 2, 0, src_dir_str ); }

        fq_src_path_str = fq_src_path_list.join( '/' );

        if ( ! do_dir_copy ) {
          fq_dest_path_str += '.' + dest_ext_str;
        }
        promise_obj = copyPathFn( fq_src_path_str, fq_dest_path_str, do_dir_copy );
        promise_list.push( promise_obj );
      }
    }

    promiseObj.all( promise_list )
      .then( function () { eventObj.emit( '04PatchFiles' ); } )
      .catch( abortFn );
  }
  // . END utility /copyVendorFilesFn/

  // BEGIN utility /patchIfNeededFn/
  function patchIfNeededFn ( is_check_found ) {
    var context_map = this;
    if ( is_check_found ) {
      logFn( 'Patch ' + context_map.relative_name + ' already applied.' );
    }
    else {
      applyPatchFn( context_map.relative_name );
      logFn( 'Applied patch ' + context_map.relative_name );
    }
  }
  // . END utility /patchIfNeededFn/

  // BEGIN utility /patchFilesFn/
  function patchFilesFn () {
    var
      patch_matrix     = setupMatrix.patch_matrix   || {},
      patch_dir_str    = patch_matrix.patch_dir_str || '',
      patch_map_list   = patch_matrix.patch_map_list|| [],
      patch_map_count  = patch_map_list.length,
      promise_list     = [],
      idx, patch_map, promise_obj,
      check_filename, patch_filename,
      bound_fn
      ;
    process.chdir( fqProjDirname );

    for ( idx = 0; idx < patch_map_count; idx++ ) {
      patch_map      = patch_map_list[ idx ];
      check_filename = patch_map.check_filename;
      patch_filename = patch_map.patch_filename;
      patch_map.relative_name = patch_dir_str + '/' + patch_filename;

      promise_obj    = grepFileFn( check_filename, patch_map.match_str );
      bound_fn       = patchIfNeededFn.bind( patch_map );
      promise_obj.then( bound_fn ).catch( abortFn );
      promise_list.push( promise_obj );
    }

    Promise.all( promise_list )
      .then( function () {
        process.chdir( fqOrigDirname );
        eventObj.emit( '05CheckGitInstall' );
      })
      .catch( abortFn );
  }
  // . END utility /patchFilesFn/

  // BEGIN utility /checkGitInstallFn/
  function checkGitInstallFn () {
    var promise_obj = makeStatProm( fqGitDirname );
    promise_obj.then( function () {
      logFn( 'Git directory ' + fqGitDirname + ' found.');
      logFn( 'Installing commit hook...' );
      eventObj.emit( '06UnLinkHook' );
    })
    .catch( function () {
      logFn( 'Git directory ' + fqGitDirname + ' NOT found.');
      logFn( 'Please "npm run setup" if you add code to a git repo.' );
      eventObj.emit( '99FinishRun');
    });
  }
  // . END utility /checkGitInstallFn/

  // BEGIN utility /unlinkHookFn/
  function unlinkHookFn () {
    fqHookFilename = fqProjDirname + '/.git/hooks/pre-commit';
    fsObj.unlink( fqHookFilename, function ( error_data ) {
      // Ignore any error
      eventObj.emit( '07LinkHook' );
    });
  }
  // . END utility /unlinkHookFn/

  // BEGIN utility /linkHookFn/
  function linkHookFn () {
    process.chdir( fqProjDirname );
    fsObj.symlink(
      '../../bin/git-hook_pre-commit',
      fqHookFilename,
      function ( error_data ) {
        if ( error_data ) { abortFn( error_data ); }
        process.chdir( fqOrigDirname );
        eventObj.emit( '99FinishRun');
      }
    );
  }
  // . END utility /linkHookFn/
  // == END UTILITY METHODS ============================================

  // == BEGIN EVENT HANDLERS ===========================================
  function on00InitVarsFn () {
    logFn( appName, 'Started.' );
    logFn( 'Initializing variables...' );
    initModuleVarsFn();
  }
  function on01ReadPkgFileFn () {
    logFn( 'Reading package file...' );
    readPkgFileFn();
  }
  function on02RmVendorDirsFn () {
    logFn( 'Removing vendor directories...' );
    rmVendorDirsFn();
  }
  function on03CopyVendorFilesFn () {
    logFn( 'Deploying vendor assets...' );
    copyVendorFilesFn();
  }
  function on04PatchFilesFn () {
    logFn( 'Applying patches...' );
    patchFilesFn();
  }
  function on05CheckGitInstallFn () {
    logFn( 'Checking for git installation...' );
    checkGitInstallFn();
  }
  function on06UnlinkHookFn () {
    logFn( 'Remove any old commit hook...' );
    unlinkHookFn();
  }
  function on07LinkHookFn () {
    logFn( 'Linking commit hook...' );
    linkHookFn();
  }
  function on99FinishRunFn () {
    logFn( appName, 'Finished.' );
    exitGoodFn();
  }
  // == . END EVENT HANDLERS ==========================================

  // == BEGIN PUBLIC METHOD /a00HelpFn/ ===============================
  function a00HelpFn () {
    var help_str
      = 'Name      : hi_score_tool\n'
      + '  Purpose   : Run script for lifecycle step\n'
      + '  Example   : hi_score_tool 00\n'
      + '  Arguments : (positional)\n'
      + '    0. The life cycle number as presented below.\n'
      + '       The default is 00.\n'
      + '      - 00 Help    (see 00-hi-score-help   )\n'
      + '      - 01 Install (see 01-hi-score-install)\n'
      + '      - 02 Setup\n'
      + '      - 03 Design\n'
      + '      - 04 Develop - Lint\n'
      + '      - 05 Develop - Test\n'
      + '      - 06 Develop - Coverage\n'
      + '      - 07 Develop - Commit\n'
      + '      - 08 Develop - Publish coverage\n'
      + '      - 09 Build\n'
      + '      - 10 Deploy\n'
      + '      - 11 Feedback\n'
      + '  Returns   : Exit status is 0 on success.\n'
      + '  Throws    : Errors result in non-zero exit status.\n'
      + '  Method    :\n'
      + '    1. Parses command-line agument and extracts step number\n'
      + '    2. Runs associated script.\n'
      + '\n';

    logFn( help_str );
    exitGoodFn();
  }
  // == . END PUBLIC METHOD /a00HelpFn/ ===============================

  // == BEGIN PUBLIC METHOD /a02SetupFn/ ==============================
  // Purpose   : Delete, copies, and patches files. Install commit hook.
  // Example   : hi_score_tool 02
  // Returns   : boolean true on success
  // Throws    : none
  // Method    :
  //   1. Count down from end of array with last_idx
  //   2. Randomly pick element from between 0 and last_idx
  //   3. Swap pick element with last_idx element
  //
  //
  // Synopsis : Setup project using package.json as manifest.
  // Provides : Deletes, copies, and patches files. Install commit hook.
  //   1. Delete all vendor directories as directed by config.
  //      directories in bin, css, font, img, and js
  //   2. Copy assets from node_modules to vendor directories with the
  //      npm version appended to the names.
  //   3. Applies any patches (uglifyjs)
  //   4. Install the commit hook if git is detected
  //
  function a02SetupFn () {
    // Layout flow control
    eventObj.on( '00InitVars',         on00InitVarsFn         );
    eventObj.on( '01ReadPkgFile',      on01ReadPkgFileFn      );
    eventObj.on( '02RmVendorDirs',     on02RmVendorDirsFn     );
    eventObj.on( '03CopyVendorFiles',  on03CopyVendorFilesFn  );
    eventObj.on( '04PatchFiles',       on04PatchFilesFn       );
    eventObj.on( '05CheckGitInstall',  on05CheckGitInstallFn  );
    eventObj.on( '06UnlinkHook',       on06UnlinkHookFn       );
    eventObj.on( '07LinkHook',         on07LinkHookFn         );
    eventObj.on( '99FinishRun',        on99FinishRunFn        );

    // Start execution
    // Timeout prevents race condition
    setTimeout( function () { eventObj.emit( '00InitVars' ); }, 0 );
  }
  // == . END PUBLIC METHOD /a02SetupFn/ ==============================

  // == BEGIN PUBLIC METHOD /a06CoverageFn/ ===========================
  function a06CoverageFn () {
    execFn( fqModuleDirname + '/.bin/istanbul cover -x \'**/vendor/**\' '
      + fqModuleDirname     + '/.bin/nodeunit '
      + fqProjDirname       + '/test/xhi_level_0.js',

      function ( error_data, stdout_str, stderr_str ) {
        if ( error_data ) {
          abortFn( error_data, stdout_str, stderr_str );
        }
        else { exitGoodFn(); }
      }
    );
  }
  // == . END PUBLIC METHOD /a06CoverageFn/ ===========================

  toolMap = {
    '00' : a00HelpFn,
    '02' : a02SetupFn,
    '06' : a06CoverageFn
  };

  // == BEGIN PUBLIC METHOD /mainFn/ ==================================
  // Purpose   : Parse command line and dispatch to requested tool.
  //
  function mainFn( arg_list ) {
    var
      node_path   = arg_list.shift(),
      script_path = arg_list.shift(),
      tool_id     = arg_list.shift(),
      tool_fn
      ;

    // Bail if node version < minVersionInt
    if ( Number( versList[0] ) < minVersionInt ) {
      logFn( 'As of hi_score 1.2+ NodeJS v'
        + minVersionInt + ' is required.'
      );
      logFn( 'NodeJS Version ' + versList.join('.') + ' is installed.' );
      abortFn( 'Please upgrade NodeJS and try again.'                  );
    }

    tool_fn = toolMap[ tool_id ];
    if ( ! tool_fn ) {
      console.warn( 'Tool step ' + tool_id + ' not found.' );
      tool_fn = toolMap[ '00' ];
    }
    tool_fn( arg_list );
  }
  // == . END PUBLIC METHOD /mainFn/ ==================================

  mainFn( argList );
// == END SCRIPT hi-score-tool ========================================
