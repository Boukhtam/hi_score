/*jslint node : true */
/* vim: set ft=javascript: */
// == BEGIN PUBLIC METHOD /setupFn/ ==============================
// Purpose   : Delete, copies, and patches files. Install commit hook.
// Example   : xhi_tool 02
// Returns   : boolean true on success
// Throws    : none
// Method    :
//   1. Count down from end of array with last_idx
//   2. Randomly pick element from between 0 and last_idx
//   3. Swap pick element with last_idx element
//
//
// Synopsis : Setup project using package.json as manifest.
// Provides : Deletes, copies, and patches files. Install commit hook.
//   1. Delete all vendor directories as directed by config.
//      directories in bin, css, font, img, and js
//   2. Copy assets from node_modules to vendor directories with the
//      npm version appended to the names.
//   3. Applies any patches (uglifyjs)
//   4. Install the commit hook if git is detected
//
function setupFn () {
  var
    context_map  = this,
    abort_fn     = context_map.abortFn,
    app_name     = context_map.appName,
    exit_good_fn = context_map.exitGoodFn,
    log_fn       = context_map.logFn
    ;

  context_map.flowObj.exec(
    function _02_00InitVarsFn () {
      log_fn( app_name + ' stage 02 step 00: Setup start.' );
      log_fn( app_name + ' stage 02 step 01: Init variables...' );
      process.chdir( context_map.fqProjDirname );
      context_map.checkExeList.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_01ReadPkgFileFn () {
      log_fn( app_name + ' stage 02 step 02: Read package file...' );
      context_map.readPkgFileFn.call({ then_fn  : this, catch_fn : abort_fn });
    },
    function _02_02RmVendorDirsFn () {
      log_fn( app_name + ' stage 02 step 03: Remove vendor directories...' );
      context_map.rmVendorDirsFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_03CopyVendorFilesFn () {
      log_fn( app_name + ' stage 02 step 04: Deploy vendor assets...' );
      context_map.copyVendorFilesFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_04PatchFilesFn () {
      log_fn( app_name + ' stage 02 step 05: Apply patches...' );
      context_map.patchFilesFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_05CheckGitInstallFn () {
      log_fn( app_name + ' stage 02 step 06: Check for git installation...' );
      context_map.checkGitInstallFn.call({
        then_fn  : this,
        catch_fn : function () {
          log_fn( 'Exiting without installing git commit hook.' );
          log_fn( 'Please run this step again if you add git.' );
          process.chdir( context_map.fqOrigDirname );
          exit_good_fn();
        }
      });
    },
    function _02_06UnlinkHookFn () {
      log_fn( app_name + ' stage 02 step 07: Remove prior commit hook...' );
      context_map.unlinkHookFn.call({
        then_fn  : this,
        catch_fn : abort_fn
      });
    },
    function _02_07LinkHookFn () {
      log_fn( app_name + ' stage 02 step 08: Add latest commit hook...' );
      context_map.linkHookFn.call({
        then_fn  : this,
        catch_fn : abort_fn
      });
    },
    function _02_99FinishRunFn () {
      log_fn( app_name + ' stage 02 step 99: Setup finish.' );
      process.chdir( context_map.fqOrigDirname );
      exit_good_fn();
    }
  );
}
// == . END PUBLIC METHOD /setupFn/ ==============================
module.exports = setupFn;
