/*jslint node : true */
/* vim: set ft=javascript: */

// == BEGIN PUBLIC METHOD /setupFn/ ==============================
// Purpose   : Setup project using package.json as manifest.
// Example   : xhi_tool 02
// Returns   : boolean true on success
// Throws    : none
//   1. Delete all vendor directories as directed by config.
//      directories in bin, css, font, img, and js
//   2. Copy assets from node_modules to vendor directories with the
//      npm version appended to the names.
//   3. Applies any patches (uglifyjs)
//   4. Install the commit hook if git is detected
//
function setupFn () {
  var
    context_obj = this,
    abort_fn    = context_obj.abortFn,
    app_name    = context_obj.appName,
    next_fn     = context_obj.nextFn,
    log_fn      = context_obj.logFn
    ;

  context_obj.flowObj.exec(
    function _02_00InitVarsFn () {
      log_fn( app_name + ' stage 02 step 00: Setup start.' );
      log_fn( app_name + ' stage 02 step 01: Init variables...' );
      process.chdir( context_obj.fqProjDirname );
      context_obj.checkExeList.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_01ReadPkgFileFn () {
      log_fn( app_name + ' stage 02 step 02: Read package file...' );
      context_obj.readPkgFileFn.call({ then_fn  : this, catch_fn : abort_fn });
    },
    function _02_02RmVendorDirsFn () {
      log_fn( app_name + ' stage 02 step 03: Remove vendor directories...' );
      context_obj.rmVendorDirsFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_03CopyVendorFilesFn () {
      log_fn( app_name + ' stage 02 step 04: Deploy vendor assets...' );
      context_obj.copyVendorFilesFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_04PatchFilesFn () {
      log_fn( app_name + ' stage 02 step 05: Apply patches...' );
      context_obj.patchFilesFn.call({ then_fn : this, catch_fn : abort_fn });
    },
    function _02_05CheckGitInstallFn () {
      log_fn( app_name + ' stage 02 step 06: Check for git installation...' );
      context_obj.checkGitInstallFn.call({
        then_fn  : this,
        catch_fn : function () {
          next_fn(
            'Exiting without installing git commit hook.\n'
            + 'Please run this step again if you add git.'
          );
        }
      });
    },
    function _02_06UnlinkHookFn () {
      log_fn( app_name + ' stage 02 step 07: Remove prior commit hook...' );
      context_obj.unlinkHookFn.call({
        then_fn  : this,
        catch_fn : abort_fn
      });
    },
    function _02_07LinkHookFn () {
      log_fn( app_name + ' stage 02 step 08: Add latest commit hook...' );
      context_obj.linkHookFn.call({
        then_fn  : this,
        catch_fn : abort_fn
      });
    },
    function _02_99FinishRunFn () {
      next_fn( app_name + ' stage 02 step 99: Setup finish.' );
    }
  );
}
// == . END PUBLIC METHOD /setupFn/ ==============================
module.exports = setupFn;
